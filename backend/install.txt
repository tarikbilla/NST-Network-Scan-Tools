#!/usr/bin/env bash
set -Eeuo pipefail

# --- Config (override via env vars when running) ---
PROJECT_DIR="$(cd "$(dirname "$0")" && pwd)"
VENV_DIR="${VENV_DIR:-$PROJECT_DIR/venv}"   # e.g. VENV_DIR=~/venvs/nst ./setup_env.sh
PYTHON_BIN="${PYTHON_BIN:-python3}"
USE_COPIES="${USE_COPIES:-1}"               # 1 => use --copies (safer on /media/ or NTFS)
INSTALL_OS_DEPS="${INSTALL_OS_DEPS:-1}"     # 1 => apt-get build deps if available
GRANT_CAPS="${GRANT_CAPS:-1}"               # 1 => sudo setcap for Scapy raw sockets

info(){ echo -e "\033[1;34m[INFO]\033[0m $*"; }
warn(){ echo -e "\033[1;33m[WARN]\033[0m $*"; }
die(){  echo -e "\033[1;31m[ERROR]\033[0m $*"; exit 1; }

# --- OS build deps (for cryptography/lxml/bcrypt/pynacl etc.) ---
if [[ "$INSTALL_OS_DEPS" == "1" ]] && command -v apt-get >/dev/null 2>&1; then
  info "Installing OS build deps (sudo)..."
  sudo apt-get update
  sudo apt-get install -y \
    build-essential python3-dev pkg-config \
    libxml2-dev libxslt1-dev libffi-dev libssl-dev \
    rustc cargo libcap2-bin
else
  info "Skipping OS deps install (INSTALL_OS_DEPS=${INSTALL_OS_DEPS})."
fi

# --- Create venv ---
if [[ ! -d "$VENV_DIR" ]]; then
  info "Creating venv at: $VENV_DIR"
  if [[ "$USE_COPIES" == "1" ]]; then
    "$PYTHON_BIN" -m venv --copies "$VENV_DIR"
  else
    "$PYTHON_BIN" -m venv "$VENV_DIR"
  fi
else
  info "Using existing venv at: $VENV_DIR"
fi

# --- Activate venv ---
# shellcheck disable=SC1090
source "$VENV_DIR/bin/activate"
info "Python: $(python -V) @ $(which python)"

# --- Upgrade packaging tools ---
info "Upgrading pip/setuptools/wheel..."
python -m pip install --upgrade pip setuptools wheel

# --- Install all required Python packages (one shot) ---
info "Installing Python packages..."
python -m pip install \
  "fastapi>=0.115,<0.116" \
  "uvicorn>=0.34,<0.35" \
  "sqlmodel>=0.0.24,<0.1" \
  "scapy>=2.5,<3" \
  netifaces \
  "requests>=2.32,<3" \
  "beautifulsoup4>=4.12,<5" \
  lxml \
  html5lib \
  "cryptography>=42,<45" \
  "paramiko>=3.4,<4" \
  bcrypt \
  pynacl

# --- (Optional) ensure requirements.txt includes these for future installs ---
REQ="$PROJECT_DIR/requirements.txt"
if [[ -f "$REQ" ]]; then
  info "Syncing core deps into requirements.txt (append if missing)..."
  add_line(){ grep -qi "^$1" "$REQ" || printf '%s\n' "$1" >> "$REQ"; }
  add_line 'fastapi>=0.115,<0.116'
  add_line 'uvicorn>=0.34,<0.35'
  add_line 'sqlmodel>=0.0.24,<0.1'
  add_line 'scapy>=2.5,<3'
  add_line 'netifaces'
  add_line 'requests>=2.32,<3'
  add_line 'beautifulsoup4>=4.12,<5'
  add_line 'lxml'
  add_line 'html5lib'
  add_line 'cryptography>=42,<45'
  add_line 'paramiko>=3.4,<4'
  add_line 'bcrypt'
  add_line 'pynacl'
else
  info "No requirements.txt found â€” skipping sync."
fi

# --- Grant raw-socket caps to venv python (so Scapy works without sudo) ---
if [[ "$GRANT_CAPS" == "1" ]] && command -v setcap >/dev/null 2>&1; then
  PY_EXE="$(readlink -f "$(which python)")"
  info "Granting cap_net_raw,cap_net_admin to $PY_EXE (sudo)..."
  if sudo setcap cap_net_raw,cap_net_admin+eip "$PY_EXE"; then
    info "Capabilities set: $(getcap "$PY_EXE" || true)"
  else
    warn "setcap failed (non-Linux FS or missing perms). You can still run with sudo if needed."
  fi
fi

info "All done "
echo
echo "To run your app now:"
echo "  source \"$VENV_DIR/bin/activate\""
echo "  python -m uvicorn main:app --reload"
